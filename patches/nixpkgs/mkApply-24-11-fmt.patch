diff --git a/lib/default.nix b/lib/default.nix
index 6f8530296044..fd4776de9c43 100644
--- a/lib/default.nix
+++ b/lib/default.nix
@@ -464,6 +464,7 @@ let
         mkAfter
         mkAliasDefinitions
         mkAliasAndWrapDefinitions
+        mkApply
         fixMergeModules
         mkRemovedOptionModule
         mkRenamedOptionModule
diff --git a/lib/modules.nix b/lib/modules.nix
index d6061ec6d039..099466d92e5d 100644
--- a/lib/modules.nix
+++ b/lib/modules.nix
@@ -1116,7 +1116,7 @@ let
         # Sort mkOrder properties.
         defs''' =
           # Avoid sorting if we don't have to.
-          if any (def: def.value._type or "" == "order") defs''.values then
+          if any (def: let type = def.value._type or ""; in type == "order" || type == "apply") defs''.values then
             sortProperties defs''.values
           else
             defs''.values;
@@ -1126,12 +1126,18 @@ let
         inherit (defs'') highestPrio;
       };
     defsFinal = defsFinal'.values;
+    #defsFinal = filter (def: def.value._type or "" != "apply") defsFinal'.values;
 
     # Type-check the remaining definitions, and merge them. Or throw if no definitions.
-    mergedValue =
-      if isDefined then
-        if all (def: type.check def.value) defsFinal then
-          type.merge loc defsFinal
+    mergedValue = let
+      merged = type.merge loc (foldl' (defs: def: (
+        # on each "apply", merge the previous defs and continue with the applied value
+        if def.value._type or "" != "apply" then defs ++ [ def ]
+        else if defs == [ ] then [ ] # ignore mapper if all values are explicitly ordered after it (see sortProperties)
+        else [ (def // { value = def.value.mapper (type.merge loc defs); }) ]
+      )) [ ] defsFinal'.values);
+    in if isDefined then
+        if all (def: type.check def.value) defsFinal then merged
         else
           let
             allInvalid = filter (def: !type.check def.value) defsFinal;
@@ -1278,7 +1284,11 @@ let
         else
           def;
       defs' = map strip defs;
-      compare = a: b: (a.priority or defaultOrderPriority) < (b.priority or defaultOrderPriority);
+      # mkApply mappers are sorted after other elements of the same priority.
+      compare = a: b: let # lessThan
+        a' = a.priority or defaultOrderPriority;
+        b' = b.priority or defaultOrderPriority;
+      in a' < b' || (a' == b' && (a.value._type or "" != "apply" && b.value._type or "" == "apply"));
     in
     sort compare defs';
 
@@ -1405,6 +1415,11 @@ let
   defaultOrderPriority = 1000;
   mkAfter = mkOrder 1500;
 
+  mkApply = mapper:
+    { _type = "apply";
+      inherit mapper;
+    };
+
   # Convenient property used to transfer all definitions and their
   # properties from one option to another. This property is useful for
   # renaming options, and also for including properties from another module
@@ -2103,6 +2118,7 @@ private
     mkAliasIfDef
     mkAliasOptionModule
     mkAliasOptionModuleMD
+    mkApply
     mkAssert
     mkBefore
     mkChangedOptionModule
