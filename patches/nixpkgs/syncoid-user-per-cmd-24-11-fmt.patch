diff --git a/nixos/modules/services/backup/syncoid.nix b/nixos/modules/services/backup/syncoid.nix
index 0d379f6c915d..5c50b405aa40 100644
--- a/nixos/modules/services/backup/syncoid.nix
+++ b/nixos/modules/services/backup/syncoid.nix
@@ -30,7 +30,7 @@ let
   # dataset (if it exists). This should solve the case of provisoning new
   # datasets.
   buildAllowCommand =
-    permissions: dataset:
+    permissions: user: dataset:
     (
       "-+${pkgs.writeShellScript "zfs-allow-${dataset}" ''
         # Here we explicitly use the booted system to guarantee the stable API needed by ZFS
@@ -46,7 +46,7 @@ let
           ${lib.escapeShellArgs [
             "/run/booted-system/sw/bin/zfs"
             "allow"
-            cfg.user
+            user
             (lib.concatStringsSep "," permissions)
             dataset
           ]}
@@ -55,7 +55,7 @@ let
             ${lib.escapeShellArgs [
               "/run/booted-system/sw/bin/zfs"
               "allow"
-              cfg.user
+              user
               (lib.concatStringsSep "," permissions)
               # Remove the last part of the path
               (builtins.dirOf dataset)
@@ -72,14 +72,14 @@ let
   # not in the pre-hook. We can't run the same if in the post hook
   # since the dataset should have been created at this point.
   buildUnallowCommand =
-    permissions: dataset:
+    permissions: user: dataset:
     (
       "-+${pkgs.writeShellScript "zfs-unallow-${dataset}" ''
         # Here we explicitly use the booted system to guarantee the stable API needed by ZFS
         ${lib.escapeShellArgs [
           "/run/booted-system/sw/bin/zfs"
           "unallow"
-          cfg.user
+          user
           (lib.concatStringsSep "," permissions)
           dataset
         ]}
@@ -87,7 +87,7 @@ let
           lib.escapeShellArgs [
             "/run/booted-system/sw/bin/zfs"
             "unallow"
-            cfg.user
+            user
             (lib.concatStringsSep "," permissions)
             # Remove the last part of the path
             (builtins.dirOf dataset)
@@ -241,6 +241,15 @@ in

               recursive = lib.mkEnableOption ''the transfer of child datasets'';

+              user = lib.mkOption {
+                type = lib.types.str;
+                example = "backup-to-\${target}";
+                description = ''
+                  The local user for this transfer command, overriding <option>services.syncoid.user</option>.
+                  With privilege delegation (i.e. with a user other than root), and when multiple commands involve the same dataset, it is important to use a different local user for each of those commands, as otherwise permissions can get removed when one command finishes, but the others are still in progress.
+                '';
+              };
+
               sshKey = lib.mkOption {
                 type = with lib.types; nullOr (coercedTo path toString str);
                 description = ''
@@ -318,6 +327,7 @@ in
             };
             config = {
               source = lib.mkDefault name;
+              user = lib.mkDefault cfg.user;
               sshKey = lib.mkDefault cfg.sshKey;
               localSourceAllow = lib.mkDefault cfg.localSourceAllow;
               localTargetAllow = lib.mkDefault cfg.localTargetAllow;
@@ -366,11 +376,11 @@ in
             path = [ "/run/booted-system/sw/bin/" ];
             serviceConfig = {
               ExecStartPre =
-                (map (buildAllowCommand c.localSourceAllow) (localDatasetName c.source))
-                ++ (map (buildAllowCommand c.localTargetAllow) (localDatasetName c.target));
+                (map (buildAllowCommand c.localSourceAllow c.user) (localDatasetName c.source))
+                ++ (map (buildAllowCommand c.localTargetAllow c.user) (localDatasetName c.target));
               ExecStopPost =
-                (map (buildUnallowCommand c.localSourceAllow) (localDatasetName c.source))
-                ++ (map (buildUnallowCommand c.localTargetAllow) (localDatasetName c.target));
+                (map (buildUnallowCommand c.localSourceAllow c.user) (localDatasetName c.source))
+                ++ (map (buildUnallowCommand c.localTargetAllow c.user) (localDatasetName c.target));
               ExecStart = lib.escapeShellArgs (
                 [ "${cfg.package}/bin/syncoid" ]
                 ++ lib.optionals c.useCommonArgs cfg.commonArgs
@@ -390,7 +400,7 @@ in
                   c.target
                 ]
               );
-              User = cfg.user;
+              User = c.user;
               Group = cfg.group;
               StateDirectory = [ "syncoid" ];
               StateDirectoryMode = "700";
